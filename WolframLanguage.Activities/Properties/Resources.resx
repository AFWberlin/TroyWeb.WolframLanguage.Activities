<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
    <comment>property group</comment>
  </data>
  <data name="InputKernel" xml:space="preserve">
    <value>Existing Kernel</value>
    <comment>property group</comment>
  </data>
  <data name="InputOpenKernel" xml:space="preserve">
    <value>Open Kernel</value>
    <comment>property group</comment>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
    <comment>property group</comment>
  </data>
  <data name="ParentScope" xml:space="preserve">
    <value>Wolfram Language Scope</value>
    <comment>display name</comment>
  </data>
  <data name="ParentScopeDescription" xml:space="preserve">
    <value>The scope that opens a connection to a wolfram language kernel.</value>
    <comment>description</comment>
  </data>
  <data name="OpenKernelDisplayName" xml:space="preserve">
    <value>Open a Wolfram Language Kernel</value>
  <comment>display name</comment>
  </data>
  <data name="OpenKernelDescription" xml:space="preserve">
    <value>Starts/Opens a connection to a wolfram language kernel.</value>
    <comment>description</comment>
  </data>
  <data name="CloseKernelDisplayName" xml:space="preserve">
    <value>Close WL Kernel connection</value>
    <comment>display name</comment>
  </data>
  <data name="CloseKernelDescription" xml:space="preserve">
    <value>Shuts down a wolfram language kernel.</value>
    <comment>description</comment>
  </data>
  <data name="KernelOutputDisplayName" xml:space="preserve">
    <value>Wolfram Language Kernel</value>
    <comment>display name</comment>
  </data>
  <data name="KernelOutputDescription" xml:space="preserve">
    <value>A wolfram language kernel interface object.</value>
    <comment>description</comment>
  </data>
  <data name="ParentScopeStartupSleepDisplayName" xml:space="preserve">
    <value>Sleep duration (ms)</value>
    <comment>display name</comment>
  </data>
  <data name="ParentScopeStartupSleepDescription" xml:space="preserve">
    <value>Sleep duration while waiting for Mathematica to start in milliseconds.</value>
    <comment>description</comment>
  </data>
  <data name="ParentScopePathDisplayName" xml:space="preserve">
    <value>Kernel Path</value>
    <comment>display name</comment>
  </data>
  <data name="ParentScopePathDescription" xml:space="preserve">
    <value>The path to your MathKernel.exe</value>
    <comment>description</comment>
  </data>
  <data name="ParentScopeKernelDisplayName" xml:space="preserve">
    <value>Kernel</value>
    <comment>display name</comment>
  </data>
  <data name="ParentScopeKernelDescription" xml:space="preserve">
    <value>An already open IKernelLink object. Will be null if closed on finish.</value>
    <comment>description</comment>
  </data>
  <data name="CloseKernelOnFinishDisplayName" xml:space="preserve">
    <value>Close Kernel after completion</value>
    <comment>display name</comment>
  </data>
  <data name="CloseKernelOnFinishDescription" xml:space="preserve">
    <value>Should the parent scope dispose of the Kernel on completion?</value>
    <comment>description</comment>
  </data>
  <data name="MetadataValidationError" xml:space="preserve">
    <value>Please provide a value for {0}</value>
    <comment>validation error</comment>
  </data>
  <data name="EvaluateActivityDescription" xml:space="preserve">
    <value>Evaluate a wolfram language expression from an Expr variable.</value>
  <comment>description</comment>
  </data>
  <data name="EvaluateActivityDisplayName" xml:space="preserve">
    <value>Evaluate Activity</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateActivityTimeoutDescription" xml:space="preserve">
    <value>Abort evaluation if it takes longer than Timeout seconds. Default to 5 minutes.</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateActivityTimeoutDisplayName" xml:space="preserve">
    <value>Timeout</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateActivityResultDescription" xml:space="preserve">
    <value>The result of the evaluation.</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateActivityResultDisplayName" xml:space="preserve">
    <value>Result</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateActivityExpressionDescription" xml:space="preserve">
    <value>The Wolfram Language expression to evaluate.</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateActivityExpressionDisplayName" xml:space="preserve">
    <value>Expression as Expr</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateActivityExpressionStringDescription" xml:space="preserve">
    <value>The Wolfram Language expression to evaluate.</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateActivityExpressionStringDisplayName" xml:space="preserve">
    <value>Expression as String</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateActivityExprDescription" xml:space="preserve">
    <value>The Wolfram Language expression to evaluate.</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateActivityExprDisplayName" xml:space="preserve">
    <value>Expression as Expr</value>
    <comment>display name</comment>
  </data>
  <data name="WolframLanguageScope_Execute_Waiting_for_client_to_be_ready___" xml:space="preserve">
    <value>Waiting for client to be ready...</value>
    <comment>Notify that the wolfram language runtime is not ready yet.</comment>
  </data>
  <data name="WolframLanguageScope_OnCompleted_Parent_Scope_complete_" xml:space="preserve">
    <value>Parent Scope complete.</value>
    <comment>Notify that the parent scope is closing.</comment>
  </data>
  <data name="ParentScopeArgsDisplayName" xml:space="preserve">
    <value>Kernel Arguments</value>
    <comment>display name</comment>
  </data>
  <data name="ParentScopeArgsDescription" xml:space="preserve">
    <value>Mathematica Kernel Arguments to use when opening kernel.</value>
    <comment>description</comment>
  </data>

  <data name="EvaluateToImageActivityDisplayName" xml:space="preserve">
    <value>Evaluate to Image</value>
  <comment>display name</comment>
  </data>
  <data name="EvaluateToImageActivityDescription" xml:space="preserve">
    <value>Evaluate mathematica expression to a .NET Image object</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateToImageActivityExpressionDisplayName" xml:space="preserve">
    <value>Expression As String</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateToImageActivityExpressionDescription" xml:space="preserve">
    <value>The expression as a string to evaluate to an image.</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateToImageActivityExprDisplayName" xml:space="preserve">
    <value>Expression As Expr</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateToImageActivityExprDescription" xml:space="preserve">
    <value>The expression as an Expr object to evaluate to an image.</value>
    <comment>description</comment>
  </data>

  <data name="EvaluateToImageActivityWidthDisplayName" xml:space="preserve">
    <value>Image Width</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateToImageActivityWidthDescription" xml:space="preserve">
    <value>The width of the exported .NET Image object</value>
    <comment>description</comment>
  </data>
  <data name="EvaluateToImageActivityHeightDisplayName" xml:space="preserve">
    <value>Image Height</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateToImageActivityHeightDescription" xml:space="preserve">
    <value>The width of the exported .NET Image object</value>
    <comment>description</comment>
  </data>

  <data name="EvaluateToInputFormActivityDisplayName" xml:space="preserve">
    <value>Evaluate to Input Form</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateToInputFormActivityDescription" xml:space="preserve">
    <value>Evaluate mathematica expression to an ascii string as it would be typed in the shell.</value>
    <comment>description</comment>
  </data>

  <data name="EvaluateToOutputFormActivityDisplayName" xml:space="preserve">
    <value>Evaluate to Output Form</value>
    <comment>display name</comment>
  </data>
  <data name="EvaluateToOutputFormActivityDescription" xml:space="preserve">
    <value>Evaluate mathematica expression to an ascii string as it would be displayed in the shell.</value>
    <comment>description</comment>
  </data>

  <data name="EnableObjectReferencesDisplayName" xml:space="preserve">
    <value>Enable .NET Object references</value>
    <comment>display name</comment>
  </data>
  <data name="EnableObjectReferencesDescription" xml:space="preserve">
    <value>Enable .NET Object references in the wolfram language kernel. Must be true if importing .NET Objects.</value>
    <comment>description</comment>
  </data>

  <data name="PeekExpressionActivityDisplayName" xml:space="preserve">
    <value>Peek Expression</value>
  <comment>display name</comment>
  </data>
  <data name="PeekExpressionActivityDescription" xml:space="preserve">
    <value>Creates an Expr from the current expression, but does not drain it off the link.</value>
    <comment>description</comment>
  </data>

  <data name="GetExpressionActivityDisplayName" xml:space="preserve">
    <value>Get Expression</value>
  <comment>display name</comment>
  </data>
  <data name="GetExpressionActivityDescription" xml:space="preserve">
    <value>Get the current expression from the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="EndPacketActivityDisplayName" xml:space="preserve">
    <value>End Packet</value>
    <comment>display name</comment>
  </data>
  <data name="EndPacketActivityDescription" xml:space="preserve">
    <value>End entry of the current packet in the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="FlushActivityDisplayName" xml:space="preserve">
    <value>Flush Buffer</value>
    <comment>display name</comment>
  </data>
  <data name="FlushActivityDescription" xml:space="preserve">
    <value>Flush the buffer of data waiting to be sent to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="GetActivityDisplayName" xml:space="preserve">
    <value>Get Value</value>
    <comment>display name</comment>
  </data>
  <data name="GetActivityDescription" xml:space="preserve">
    <value>Get a value waiting to be retrieved from the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="NewPacketActivityDisplayName" xml:space="preserve">
    <value>New Packet</value>
    <comment>display name</comment>
  </data>
  <data name="NewPacketActivityDescription" xml:space="preserve">
    <value>Clears the current packet waiting to be written to/ read from the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutActivityDisplayName" xml:space="preserve">
    <value>Put Value</value>
    <comment>display name</comment>
  </data>
  <data name="PutActivityDescription" xml:space="preserve">
    <value>Put a value to the packet waiting to be written to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutFuncActivityDisplayName" xml:space="preserve">
    <value>Put Function</value>
    <comment>display name</comment>
  </data>
  <data name="PutFuncActivityDescription" xml:space="preserve">
    <value>Put a function with argument count to the packet waiting to be written to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutFuncActivityFuncDisplayName" xml:space="preserve">
    <value>Function</value>
    <comment>display name</comment>
  </data>
  <data name="PutFuncActivityFuncDescription" xml:space="preserve">
    <value>The function name to be added to the packet waiting to be written to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutFuncActivityArgCountDisplayName" xml:space="preserve">
    <value>Number of Arguments</value>
    <comment>display name</comment>
  </data>
  <data name="PutFuncActivityArgCountDescription" xml:space="preserve">
    <value>The number of arguments to be added to the packet waiting to be written to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutActivityInDisplayName" xml:space="preserve">
    <value>Value</value>
    <comment>display name</comment>
  </data>
  <data name="PutActivityInDescription" xml:space="preserve">
    <value>Value to be written to the waiting packet.</value>
    <comment>description</comment>
  </data>

  <data name="PutArgCountActivityDisplayName" xml:space="preserve">
    <value>Put Argument Count</value>
    <comment>display name</comment>
  </data>
  <data name="PutArgCountActivityDescription" xml:space="preserve">
    <value>Put the number of arguments of the current function to the packet waiting to be written to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutArgCountActivityNumDisplayName" xml:space="preserve">
    <value>Argument Count</value>
    <comment>display name</comment>
  </data>
  <data name="PutArgCountActivityNumDescription" xml:space="preserve">
    <value>The number of arguments of the current function.</value>
    <comment>description</comment>
  </data>

  <data name="PutDataActivityDisplayName" xml:space="preserve">
    <value>Put Data</value>
    <comment>display name</comment>
  </data>
  <data name="PutDataActivityDescription" xml:space="preserve">
    <value>Put an array of data to the packet waiting to be written to the Kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutDataActivityDataDisplayName" xml:space="preserve">
    <value>Data</value>
    <comment>display name</comment>
  </data>
  <data name="PutDataActivityDataDescription" xml:space="preserve">
    <value>Byte array of data to be written to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="PutDataActivitySizeDisplayName" xml:space="preserve">
    <value>Size</value>
    <comment>display name</comment>
  </data>
  <data name="PutDataActivitySizeDescription" xml:space="preserve">
    <value>Length of the data array.</value>
    <comment>description</comment>
  </data>

  <data name="PutNextActivityDisplayName" xml:space="preserve">
    <value>Put Next Expression Type</value>
    <comment>display name</comment>
  </data>
  <data name="PutNextActivityDescription" xml:space="preserve">
    <value>Puts the type of the next added item to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="PutNextActivityTypeDisplayName" xml:space="preserve">
    <value>Expression Type</value>
    <comment>display name</comment>
  </data>
  <data name="PutNextActivityTypeDescription" xml:space="preserve">
    <value>ExpressionType of the next added item to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="WaitForPacketActivityDisplayName" xml:space="preserve">
    <value>Wait For the Next Packet</value>
    <comment>display name</comment>
  </data>
  <data name="WaitForPacketActivityDescription" xml:space="preserve">
    <value>Waits for a result packet to be returned from the kernel.</value>
    <comment>description</comment>
  </data>

  <data name="PutSymbolActivityDisplayName" xml:space="preserve">
    <value>Put Symbol</value>
    <comment>display name</comment>
  </data>
  <data name="PutSymbolActivityDescription" xml:space="preserve">
    <value>Puts a symbol into to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="PutSymbolActivitySymbolDisplayName" xml:space="preserve">
    <value>Symbol</value>
    <comment>display name</comment>
  </data>
  <data name="PutSymbolActivitySymbolDescription" xml:space="preserve">
    <value>The symbol to be added into to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="PutReferenceActivityDisplayName" xml:space="preserve">
    <value>Put Reference</value>
    <comment>display name</comment>
  </data>
  <data name="PutReferenceActivityDescription" xml:space="preserve">
    <value>Puts an object by reference into to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="PutReferenceActivityInDisplayName" xml:space="preserve">
    <value>Object</value>
    <comment>display name</comment>
  </data>
  <data name="PutReferenceActivityInDescription" xml:space="preserve">
    <value>Object by reference to be put into to the packet in the buffer.</value>
    <comment>description</comment>
  </data>

  <data name="PutReferenceActivityTypeDisplayName" xml:space="preserve">
    <value>Object Type</value>
    <comment>display name</comment>
  </data>
  <data name="PutReferenceActivityTypeDescription" xml:space="preserve">
    <value>The type of the object by reference to be put into the packet in the buffer.</value>
    <comment>description</comment>
  </data>
</root>